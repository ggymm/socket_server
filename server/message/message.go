// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package message

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CommandType int32

const (
	CommandType_HANDSHAKE_REQ            CommandType = 0
	CommandType_HANDSHAKE_RESP           CommandType = 1
	CommandType_AUTH_REQ                 CommandType = 2
	CommandType_AUTH_RESP                CommandType = 3
	CommandType_LOGIN_REQ                CommandType = 4
	CommandType_LOGIN_RESP               CommandType = 5
	CommandType_JOIN_GROUP_REQ           CommandType = 6
	CommandType_JOIN_GROUP_RESP          CommandType = 7
	CommandType_JOIN_GROUP_NOTIFY_RESP   CommandType = 8
	CommandType_EXIT_GROUP_NOTIFY_RESP   CommandType = 9
	CommandType_CHAT_REQ                 CommandType = 10
	CommandType_CHAT_RESP                CommandType = 11
	CommandType_HEARTBEAT_REQ            CommandType = 12
	CommandType_CLOSE_REQ                CommandType = 13
	CommandType_CANCEL_MSG_REQ           CommandType = 14
	CommandType_CANCEL_MSG_RESP          CommandType = 15
	CommandType_GET_USER_REQ             CommandType = 16
	CommandType_GET_USER_RESP            CommandType = 17
	CommandType_GET_MESSAGE_REQ          CommandType = 18
	CommandType_GET_MESSAGE_RESP         CommandType = 19
	CommandType_GET_UN_READ_MESSAGE_REQ  CommandType = 20
	CommandType_GET_UN_READ_MESSAGE_RESP CommandType = 21
)

var CommandType_name = map[int32]string{
	0:  "HANDSHAKE_REQ",
	1:  "HANDSHAKE_RESP",
	2:  "AUTH_REQ",
	3:  "AUTH_RESP",
	4:  "LOGIN_REQ",
	5:  "LOGIN_RESP",
	6:  "JOIN_GROUP_REQ",
	7:  "JOIN_GROUP_RESP",
	8:  "JOIN_GROUP_NOTIFY_RESP",
	9:  "EXIT_GROUP_NOTIFY_RESP",
	10: "CHAT_REQ",
	11: "CHAT_RESP",
	12: "HEARTBEAT_REQ",
	13: "CLOSE_REQ",
	14: "CANCEL_MSG_REQ",
	15: "CANCEL_MSG_RESP",
	16: "GET_USER_REQ",
	17: "GET_USER_RESP",
	18: "GET_MESSAGE_REQ",
	19: "GET_MESSAGE_RESP",
	20: "GET_UN_READ_MESSAGE_REQ",
	21: "GET_UN_READ_MESSAGE_RESP",
}

var CommandType_value = map[string]int32{
	"HANDSHAKE_REQ":            0,
	"HANDSHAKE_RESP":           1,
	"AUTH_REQ":                 2,
	"AUTH_RESP":                3,
	"LOGIN_REQ":                4,
	"LOGIN_RESP":               5,
	"JOIN_GROUP_REQ":           6,
	"JOIN_GROUP_RESP":          7,
	"JOIN_GROUP_NOTIFY_RESP":   8,
	"EXIT_GROUP_NOTIFY_RESP":   9,
	"CHAT_REQ":                 10,
	"CHAT_RESP":                11,
	"HEARTBEAT_REQ":            12,
	"CLOSE_REQ":                13,
	"CANCEL_MSG_REQ":           14,
	"CANCEL_MSG_RESP":          15,
	"GET_USER_REQ":             16,
	"GET_USER_RESP":            17,
	"GET_MESSAGE_REQ":          18,
	"GET_MESSAGE_RESP":         19,
	"GET_UN_READ_MESSAGE_REQ":  20,
	"GET_UN_READ_MESSAGE_RESP": 21,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

type MsgType int32

const (
	MsgType_TEXT  MsgType = 0
	MsgType_IMG   MsgType = 1
	MsgType_VOICE MsgType = 2
	MsgType_VIDEO MsgType = 3
	MsgType_MUSIC MsgType = 4
	MsgType_NEWS  MsgType = 5
)

var MsgType_name = map[int32]string{
	0: "TEXT",
	1: "IMG",
	2: "VOICE",
	3: "VIDEO",
	4: "MUSIC",
	5: "NEWS",
}

var MsgType_value = map[string]int32{
	"TEXT":  0,
	"IMG":   1,
	"VOICE": 2,
	"VIDEO": 3,
	"MUSIC": 4,
	"NEWS":  5,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}

type ChatType int32

const (
	ChatType_PUBLIC  ChatType = 0
	ChatType_PRIVATE ChatType = 1
)

var ChatType_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}

var ChatType_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}

func (ChatType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}

type Message struct {
	From       int64       `protobuf:"varint,1,opt,name=From,proto3" json:"From,omitempty"`
	To         int64       `protobuf:"varint,2,opt,name=To,proto3" json:"To,omitempty"`
	Cmd        CommandType `protobuf:"varint,3,opt,name=Cmd,proto3,enum=message.CommandType" json:"Cmd,omitempty"`
	CreateTime int64       `protobuf:"varint,4,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	MsgType    MsgType     `protobuf:"varint,5,opt,name=MsgType,proto3,enum=message.MsgType" json:"MsgType,omitempty"`
	ChatType   ChatType    `protobuf:"varint,6,opt,name=ChatType,proto3,enum=message.ChatType" json:"ChatType,omitempty"`
	GroupId    string      `protobuf:"bytes,7,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	Content    string      `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	Extras     string      `protobuf:"bytes,9,opt,name=Extras,proto3" json:"Extras,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Message) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Message) GetCmd() CommandType {
	if m != nil {
		return m.Cmd
	}
	return CommandType_HANDSHAKE_REQ
}

func (m *Message) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *Message) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_TEXT
}

func (m *Message) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_PUBLIC
}

func (m *Message) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Message) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Message) GetExtras() string {
	if m != nil {
		return m.Extras
	}
	return ""
}

func init() {
	proto.RegisterEnum("message.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("message.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("message.ChatType", ChatType_name, ChatType_value)
	proto.RegisterType((*Message)(nil), "message.Message")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0xda, 0x4c,
	0x14, 0xc5, 0xfd, 0x07, 0x30, 0xdc, 0x04, 0x32, 0xb9, 0xe1, 0xcb, 0x67, 0xb5, 0x95, 0x85, 0x5a,
	0xa9, 0x42, 0x48, 0xcd, 0xa2, 0x7d, 0x02, 0x63, 0x26, 0xc6, 0x2d, 0xb6, 0xa7, 0x9e, 0x21, 0x4d,
	0x57, 0x88, 0x0a, 0x2b, 0xed, 0xc2, 0x18, 0x81, 0x2b, 0xb5, 0x6f, 0xd1, 0x07, 0xe8, 0xe3, 0x74,
	0xd1, 0x65, 0x96, 0x5d, 0x56, 0xf0, 0x22, 0xd5, 0x0c, 0x86, 0x80, 0x94, 0xdd, 0x3d, 0xe7, 0xfc,
	0xee, 0x9d, 0x3b, 0xd6, 0x18, 0x9a, 0x59, 0xba, 0x5a, 0x4d, 0xef, 0xd2, 0xab, 0xc5, 0x32, 0x2f,
	0x72, 0xb4, 0x4a, 0xf9, 0xfc, 0xa7, 0x01, 0x56, 0xb8, 0xad, 0x11, 0xa1, 0x72, 0xbd, 0xcc, 0x33,
	0x5b, 0xef, 0xe8, 0x5d, 0x33, 0x51, 0x35, 0xb6, 0xc0, 0x10, 0xb9, 0x6d, 0x28, 0xc7, 0x10, 0x39,
	0xbe, 0x04, 0xd3, 0xcb, 0x66, 0xb6, 0xd9, 0xd1, 0xbb, 0xad, 0xd7, 0xed, 0xab, 0xdd, 0x54, 0x2f,
	0xcf, 0xb2, 0xe9, 0x7c, 0x26, 0xbe, 0x2f, 0xd2, 0x44, 0x02, 0xe8, 0x00, 0x78, 0xcb, 0x74, 0x5a,
	0xa4, 0xe2, 0x4b, 0x96, 0xda, 0x15, 0xd5, 0x7f, 0xe0, 0x60, 0x0f, 0xac, 0x70, 0x75, 0x27, 0x79,
	0xbb, 0xaa, 0x66, 0x91, 0xfd, 0xac, 0xd2, 0x4f, 0x76, 0x00, 0xbe, 0x82, 0xba, 0xf7, 0x79, 0x5a,
	0x28, 0xb8, 0xa6, 0xe0, 0xf3, 0x87, 0x83, 0xcb, 0x20, 0xd9, 0x23, 0x68, 0x83, 0xe5, 0x2f, 0xf3,
	0xaf, 0x8b, 0x60, 0x66, 0x5b, 0x1d, 0xbd, 0xdb, 0x48, 0x76, 0x52, 0x26, 0x5e, 0x3e, 0x2f, 0xd2,
	0x79, 0x61, 0xd7, 0xb7, 0x49, 0x29, 0xf1, 0x12, 0x6a, 0xf4, 0x5b, 0xb1, 0x9c, 0xae, 0xec, 0x86,
	0x0a, 0x4a, 0xd5, 0xfb, 0x65, 0xc2, 0xc9, 0xc1, 0xdd, 0xf0, 0x1c, 0x9a, 0x43, 0x37, 0x1a, 0xf0,
	0xa1, 0xfb, 0x8e, 0x4e, 0x12, 0xfa, 0x9e, 0x68, 0x88, 0xd0, 0x3a, 0xb4, 0x38, 0x23, 0x3a, 0x9e,
	0x42, 0xdd, 0x1d, 0x8b, 0xa1, 0x22, 0x0c, 0x6c, 0x42, 0xa3, 0x54, 0x9c, 0x11, 0x53, 0xca, 0x51,
	0xec, 0x07, 0x91, 0x4a, 0x2b, 0xd8, 0x02, 0xd8, 0x49, 0xce, 0x48, 0x55, 0xce, 0x7b, 0x1b, 0x07,
	0xd1, 0xc4, 0x4f, 0xe2, 0x31, 0x53, 0x4c, 0x0d, 0x2f, 0xe0, 0xec, 0xc8, 0xe3, 0x8c, 0x58, 0xf8,
	0x04, 0x2e, 0x0f, 0xcc, 0x28, 0x16, 0xc1, 0xf5, 0xc7, 0x6d, 0x56, 0x97, 0x19, 0xbd, 0x0d, 0xc4,
	0x23, 0x59, 0x43, 0x2e, 0xe7, 0x0d, 0x5d, 0xa1, 0x46, 0x83, 0xdc, 0xa6, 0x54, 0x9c, 0x91, 0x13,
	0x75, 0x41, 0xea, 0x26, 0xa2, 0x4f, 0x4b, 0xe2, 0x54, 0x11, 0xa3, 0x98, 0x6f, 0xef, 0xdb, 0x94,
	0xfb, 0x79, 0x6e, 0xe4, 0xd1, 0xd1, 0x24, 0xe4, 0xbe, 0xf2, 0x5a, 0x72, 0xbf, 0x23, 0x8f, 0x33,
	0x72, 0x86, 0x04, 0x4e, 0x7d, 0x2a, 0x26, 0x63, 0x4e, 0x13, 0x85, 0x11, 0x39, 0xfc, 0xc0, 0xe1,
	0x8c, 0x9c, 0xcb, 0x4e, 0x69, 0x85, 0x94, 0x73, 0xd7, 0xdf, 0x1e, 0x81, 0xd8, 0x06, 0x72, 0x6c,
	0x72, 0x46, 0x2e, 0xf0, 0x29, 0xfc, 0xaf, 0xba, 0xe5, 0x97, 0x72, 0x07, 0x47, 0x2d, 0x6d, 0x7c,
	0x06, 0xf6, 0xe3, 0x21, 0x67, 0xe4, 0xbf, 0x9e, 0xbf, 0x7f, 0x6d, 0x58, 0x87, 0x8a, 0xa0, 0xb7,
	0x82, 0x68, 0x68, 0x81, 0x19, 0x84, 0x3e, 0xd1, 0xb1, 0x01, 0xd5, 0x9b, 0x38, 0xf0, 0x28, 0x31,
	0x54, 0x19, 0x0c, 0x68, 0x4c, 0x4c, 0x59, 0x86, 0x63, 0x1e, 0x78, 0xa4, 0x22, 0x7b, 0x22, 0xfa,
	0x81, 0x93, 0x6a, 0xef, 0xc5, 0xc3, 0x53, 0x44, 0x80, 0x1a, 0x1b, 0xf7, 0x47, 0x81, 0x47, 0x34,
	0x3c, 0x01, 0x8b, 0x25, 0xc1, 0x8d, 0x2b, 0x28, 0xd1, 0xfb, 0xf6, 0xef, 0xb5, 0xa3, 0xdf, 0xaf,
	0x1d, 0xfd, 0xef, 0xda, 0xd1, 0x7f, 0x6c, 0x1c, 0xed, 0x7e, 0xe3, 0x68, 0x7f, 0x36, 0x8e, 0xf6,
	0xa9, 0xa6, 0xfe, 0xbe, 0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x8f, 0xe2, 0xc4, 0x8e,
	0x03, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.To))
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Cmd))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.CreateTime))
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgType))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ChatType))
	}
	if len(m.GroupId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Extras) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Extras)))
		i += copy(dAtA[i:], m.Extras)
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovMessage(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovMessage(uint64(m.To))
	}
	if m.Cmd != 0 {
		n += 1 + sovMessage(uint64(m.Cmd))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessage(uint64(m.CreateTime))
	}
	if m.MsgType != 0 {
		n += 1 + sovMessage(uint64(m.MsgType))
	}
	if m.ChatType != 0 {
		n += 1 + sovMessage(uint64(m.ChatType))
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Extras)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cmd |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= ChatType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extras", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Extras = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMessage
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)
